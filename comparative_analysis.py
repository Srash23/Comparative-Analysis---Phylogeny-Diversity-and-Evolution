# -*- coding: utf-8 -*-
"""Comparative_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cBw62ZeqJMWUtYjMKTKHERnZpgsZPyNI
"""

!pip install biopython nglview reportlab
!nglview enable

import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
from contextlib import closing

from Bio import SeqIO, SeqUtils, ExPASy, SwissProt, PDB
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Data import CodonTable
from Bio.Graphics import GenomeDiagram
from Bio.SeqUtils import gc_fraction
from Bio import AlignIO, Phylo
from Bio.SeqRecord import SeqRecord
from Bio.Align.Applications import MafftCommandline
from Bio.Phylo.Applications import FastTreeCommandline
from reportlab.lib import colors

from io import StringIO
import pandas as pd
from collections import OrderedDict

import nglview
from reportlab.lib import colors
import warnings
warnings.filterwarnings("ignore")

import Bio
print("BioPython version:", Bio.__version__)

!apt-get install -y mafft fasttree
!pip install biopython pandas scikit-learn matplotlib

### Parse a FASTA file and inspect records
fungi = SeqIO.parse("fungi.ITS.fna", "fasta")
rec1 = next(fungi)
print(rec1)
print("Record type:", type(rec1))

### Use SeqIO.index to access a specific sequence
fungi_index = SeqIO.index("fungi.ITS.fna", "fasta")
print(fungi_index['NR_111007.1'])
print("Total records:", len(fungi_index))

### Read E. coli genome FASTA and explore sequence
with open("GCF_000005845.2_ASM584v2_genomic.fna") as fp:
    ecoli = SeqIO.read(fp, "fasta")

print("Length:", len(ecoli))
print("Description:", ecoli.description)
print("Sequence type:", type(ecoli.seq))

### Slice and analyze the DNA sequence
seq = ecoli.seq
start, stop = 205125, 208608  # dnaE
cds = seq[start:stop]
print("Length of CDS:", len(cds))
print("Protein (standard table):", cds.translate(cds=True))

### Use correct codon table for Bacteria
bact_table = CodonTable.unambiguous_dna_by_name['Bacterial']
protein_bact = cds.translate(table=bact_table, cds=True)
print(bact_table)
print("Protein matches standard translation:", protein_bact == cds.translate(cds=True))

### GC skew analysis (sliding window & cumulative)
window = 1000
gc_skew = SeqUtils.GC_skew(seq, window=window)
x_pos = np.arange(0, len(seq), window)

plt.figure(figsize=(14,4))
plt.plot(x_pos, gc_skew)
plt.title("GC Skew (Window = 1000)")
plt.show()

gc_skew_cum = np.cumsum(gc_skew)
plt.figure(figsize=(14,4))
plt.plot(x_pos, gc_skew_cum)
plt.title("Cumulative GC Skew")
plt.show()

ori = np.argmin(gc_skew_cum) * window
ter = np.argmax(gc_skew_cum) * window
print("Origin of Replication (approx):", ori)
print("Terminus (approx):", ter)

!head GCF_000005845.2_ASM584v2_genomic.gbff

### Genbank parsing and feature exploration
with open("GCF_000005845.2_ASM584v2_genomic.gbff") as fp:
    gbk_record = SeqIO.read(fp, "genbank")

print("Available feature types:", set(f.type for f in gbk_record.features))

### CDS feature analysis and dnaE location
cds_features = [f for f in gbk_record.features if f.type == "CDS"]
print("Number of CDS features:", len(cds_features))

rep_origin = [f for f in gbk_record.features if f.type == "rep_origin"]
print("Origin of replication feature:", rep_origin)

dnaE_cds = next(f for f in cds_features if f.qualifiers.get("gene", [""])[0] == "dnaE")
print("dnaE CDS location:", dnaE_cds.location)

print(dnaE_cds)

### Coding percentage of genome
coding_length = sum(len(f) for f in cds_features)
print("Coding percentage: {:.2%}".format(coding_length / len(seq)))

### GC content in CDS vs non-CDS
cds_gc = [gc_fraction(f.extract(seq)) * 100 for f in cds_features]

non_cds_gc = []
for flank0, flank1 in zip(cds_features[:-1], cds_features[1:]):
    s, e = int(flank0.location.end), int(flank1.location.start)
    non_cds_gc.append(gc_fraction(seq[s:e]) * 100)

fig, ax = plt.subplots()
ax.hist(non_cds_gc, bins=20, alpha=0.4, label='non-CDS')
ax.hist(cds_gc, bins=20, alpha=0.4, label='CDS')
ax.axvline(gc_fraction(seq) * 100, color='black', linestyle='dashed', label='Genome-wide')
ax.set_title("GC Content Distribution")
ax.set_xlabel("GC content (%)")
ax.legend()
plt.show()

### Protein metadata from SwissProt
with ExPASy.get_sprot_raw("P10443") as handle:
    prot_record = SwissProt.read(handle)

print("Protein name:", prot_record.entry_name)
print("Organism:", prot_record.organism)
print("Function comment:", prot_record.comments[0])

### Load and visualize PDB with NGLView
pdb_refs = [ref[1] for ref in prot_record.cross_references if ref[0] == "PDB"]
print("PDB IDs:", pdb_refs)

view = nglview.show_pdbid(pdb_refs[0])
view

### Genome diagram with GenomeDiagram

# Step 1: Read the GenBank file
plasmid = SeqIO.read("e_coli_plasmid.gb", "genbank")

# Step 2: Create the diagram
gd_diagram = GenomeDiagram.Diagram("E. coli Plasmid")
track = gd_diagram.new_track(1, name="Genes")
feature_set = track.new_set()

# Step 3: Add features to the diagram
for i, feature in enumerate(plasmid.features):
    if feature.type == "gene":
        color = colors.blue if i % 2 == 0 else colors.lightblue
        feature_set.add_feature(feature, sigil="ARROW", color=color, label=True,
                                label_size=10, label_angle=0)

# Step 4: Draw and write to PDF
gd_diagram.draw(format="circular", circular=True, start=0, end=len(plasmid), circle_core=0.5)
gd_diagram.write("diagram.pdf", "PDF")



refseq_its = "fungi.ITS.fna"

from Bio import SeqIO

seqs = list(SeqIO.parse(refseq_its, "fasta"))
len(seqs)

seqs[0]

def name_from_description(desc):
    seq_id, genus, species = desc.split()[:3]
    taxonomy = {
        'genus': genus,
        'species': species,
        'name': '{} {}'.format(genus, species)
    }
    return seq_id, taxonomy

desc0 = "NR_132798.1 Roccella elisabethae S L14846 ITS region; from TYPE material"
assert name_from_description(desc0) == ("NR_132798.1", {
    'name': "Roccella elisabethae",
    'genus': "Roccella",
    'species': "elisabethae"
})

for seq in seqs:
    seq_id, taxonomy = name_from_description(seq.description)
    seq.annotations.update(taxonomy)
    seq.description = seq_id

assert seqs[0].description == 'NR_132798.1'
assert seqs[0].annotations['name'] == "Roccella elisabethae"
assert seqs[0].annotations['genus'] == "Roccella"
assert seqs[0].annotations['species'] == "elisabethae"

seqs[0]

count_genera = Counter(seq.annotations['genus'] for seq in seqs)
print(len(count_genera))
print(count_genera.most_common(10))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd

most_common = count_genera.most_common(30)
names, values = zip(*reversed(most_common))

count_genera_df = pd.DataFrame(index=names, data={'count': list(values)})
count_genera_df.plot.barh(figsize=(10, 10))

del count_genera_df

names_of_interest = [
    "Aspergillus sojae",          # soy sauce
    "Aspergillus oryzae",         # koji (sake, makgeolli, shochu, ...)
    "Aspergillus niger",          # citric acid
    "Aspergillus nidulans",       # industrial uses
    "Aspergillus fumigatus",      # toxic
    "Aspergillus flavus",         # toxic
    "Penicillium chrysogenum",    # makes penicillin
    "Penicillium italicum",       # plant pathogen
    "Penicillium roqueforti",     # cheese making
    "Penicillium verrucosum",     # toxic
    "Saccharomyces cerevisiae",   # beer
    "Saccharomyces eubayanus",    # beer
    "Saccharomyces pastorianus",  # beer
    "Saccharomyces paradoxus",    # wild yeast
]

selected = []
for seq in seqs:
    if seq.annotations['name'] in names_of_interest:
        selected.append(seq)

assert len(selected) == len(names_of_interest)

ids_to_names = {seq.id: seq.annotations['name'] for seq in selected}
ids_to_names

### Multiple Alignment

with open("selected_fungi.fasta", "w") as fp:
    SeqIO.write(selected, fp, "fasta")

!head selected_fungi.fasta

mafft_cmd = MafftCommandline(input="selected_fungi.fasta")
stdout, stderr = mafft_cmd()

with open("selected_aligned.fasta", "w") as fp:
    fp.write(stdout)

#print(stderr)
print(stdout)

from io import StringIO
from Bio import AlignIO
align = AlignIO.read(StringIO(stdout), "fasta")

from IPython.display import display

def Fasta(data=''):
    bundle = {}
    bundle['application/vnd.fasta.fasta'] = data
    bundle['text/plain'] = data
    display(bundle, raw=True)

Fasta(stdout)

ids_to_names

### Building a phylogenetic tree

from Bio.Phylo.Applications import FastTreeCommandline
fasttree = FastTreeCommandline(
    input="selected_aligned.fasta", out="selected.newick", nt=True
)
stdout, stderr = fasttree()
!cat selected.newick

### Visualizing the phylogenetic tree

from Bio import Phylo

tree = Phylo.read("selected.newick", "newick")

fig, ax = plt.subplots(1, 1, figsize=(10, 10))
Phylo.draw(tree, axes=ax)

ids_to_names['NR_138273.1']
def id_to_name(node):
    seq_id = node.name
    name = ids_to_names.get(seq_id)
    if name is None:
        return None
    return f"{name} ({seq_id})"

fig, ax = plt.subplots(1, 1, figsize=(10, 10))
Phylo.draw(tree, axes=ax, label_func=id_to_name)

# Install ete3 + required dependencies
!apt-get install -y python3-pyqt5
!pip install ete3

!apt-get install -y python3-pyqt5 xdg-utils xvfb libegl1
!pip install --upgrade --force-reinstall ete3

!pip install scikit-bio

### Quantitative information about a multiple alignment

from skbio import TabularMSA, DNA

msa = TabularMSA.read('selected_aligned.fasta', constructor=DNA, lowercase=True)
msa.reassign_index(minter='id')
positional_conservation = msa.conservation(
    metric='inverse_shannon_uncertainty', degenerate_mode='nan', gap_mode='include'
)
plt.plot(positional_conservation)

from skbio import DistanceMatrix
from skbio.sequence.distance import hamming

dm = DistanceMatrix.from_iterable(msa, metric=hamming, keys=msa.index)
print(dm)

dm

### Principal coordinate analysis

import skbio
pc = skbio.stats.ordination.pcoa(dm)
pc.samples

taxa_to_colors = {
    "Penicillium": "blue",
    "Saccharomyces": "red",
    "Aspergillus": "orange"
}
colors = [taxa_to_colors[ids_to_names[id_].split()[0]] for id_ in pc.samples.index]

pc.samples.plot.scatter(x='PC1', y='PC2', c=colors)

for genus, color in taxa_to_colors.items():
    plt.plot([], [], 'o', c=color, label=genus)
plt.legend()

pc

from skbio.tree import nj
sk_tree = nj(dm)
print(sk_tree.ascii_art())